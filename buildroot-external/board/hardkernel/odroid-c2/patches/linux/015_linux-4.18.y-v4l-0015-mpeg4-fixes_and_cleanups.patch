From 36c532fff8000ef7a125b9260753a374ec746426 Mon Sep 17 00:00:00 2001
From: Maxime Jourdan <mjourdan@baylibre.com>
Date: Fri, 31 Aug 2018 14:03:23 +0200
Subject: [PATCH] mpeg4: fixes & cleanups

* Remove unused registers
* Use constants for bits and masks
* abort on fatal error
* Don't set sess->priv until the end
---
 .../media/platform/meson/vdec/codec_mpeg4.c   | 59 +++++++++++--------
 1 file changed, 33 insertions(+), 26 deletions(-)

diff --git a/drivers/media/platform/meson/vdec/codec_mpeg4.c b/drivers/media/platform/meson/vdec/codec_mpeg4.c
index c6db2640c91a7..b28e3d477df0d 100644
--- a/drivers/media/platform/meson/vdec/codec_mpeg4.c
+++ b/drivers/media/platform/meson/vdec/codec_mpeg4.c
@@ -13,18 +13,16 @@
 /* Offset added by firmware, to substract from workspace paddr */
 #define DCAC_BUFF_START_IP	0x02b00000
 
-/* map FW registers to known MPEG4 functions */
-#define MP4_PIC_RATIO       AV_SCRATCH_5
-#define MP4_ERR_COUNT       AV_SCRATCH_6
-#define MP4_PIC_WH          AV_SCRATCH_7
-#define MREG_BUFFERIN       AV_SCRATCH_8
-#define MREG_BUFFEROUT      AV_SCRATCH_9
-#define MP4_NOT_CODED_CNT   AV_SCRATCH_A
-#define MP4_VOP_TIME_INC    AV_SCRATCH_B
-#define MP4_OFFSET_REG      AV_SCRATCH_C
-#define MP4_SYS_RATE        AV_SCRATCH_E
-#define MEM_OFFSET_REG      AV_SCRATCH_F
-#define MREG_FATAL_ERROR    AV_SCRATCH_L
+/* map firmware registers to known MPEG4 functions */
+#define MREG_BUFFERIN		AV_SCRATCH_8
+#define MREG_BUFFEROUT		AV_SCRATCH_9
+#define MP4_NOT_CODED_CNT	AV_SCRATCH_A
+#define MEM_OFFSET_REG		AV_SCRATCH_F
+#define MREG_FATAL_ERROR	AV_SCRATCH_L
+
+#define BUF_IDX_MASK		GENMASK(2, 0)
+#define INTERLACE_FLAG		BIT(7)
+#define TOP_FIELD_FIRST_FLAG	BIT(6)
 
 struct codec_mpeg4 {
 	/* Buffer for the MPEG4 Workspace */
@@ -39,7 +37,7 @@ static int codec_mpeg4_can_recycle(struct amvdec_core *core)
 
 static void codec_mpeg4_recycle(struct amvdec_core *core, u32 buf_idx)
 {
-	amvdec_write_dos(core, MREG_BUFFERIN, ~(1 << buf_idx));
+	amvdec_write_dos(core, MREG_BUFFERIN, ~BIT(buf_idx));
 }
 
 static int codec_mpeg4_start(struct amvdec_session *sess) {
@@ -51,8 +49,6 @@ static int codec_mpeg4_start(struct amvdec_session *sess) {
 	if (!mpeg4)
 		return -ENOMEM;
 
-	sess->priv = mpeg4;
-
 	/* Allocate some memory for the MPEG4 decoder's state */
 	mpeg4->workspace_vaddr = dma_alloc_coherent(core->dev, SIZE_WORKSPACE,
 						    &mpeg4->workspace_paddr,
@@ -63,6 +59,7 @@ static int codec_mpeg4_start(struct amvdec_session *sess) {
 		goto free_mpeg4;
 	}
 
+	/* Canvas regs: AV_SCRATCH_0-AV_SCRATCH_4;AV_SCRATCH_G-AV_SCRATCH_J */
 	amvdec_set_canvases(sess, (u32[]){ AV_SCRATCH_0, AV_SCRATCH_G, 0 },
 				  (u32[]){ 4, 4, 0 });
 
@@ -75,6 +72,8 @@ static int codec_mpeg4_start(struct amvdec_session *sess) {
 	amvdec_write_dos(core, MREG_FATAL_ERROR, 0);
 	amvdec_write_dos(core, MDEC_PIC_DC_THRESH, 0x404038aa);
 
+	sess->priv = mpeg4;
+
 	return 0;
 
 free_mpeg4:
@@ -99,26 +98,34 @@ static int codec_mpeg4_stop(struct amvdec_session *sess)
 
 static irqreturn_t codec_mpeg4_isr(struct amvdec_session *sess)
 {
+	struct amvdec_core *core = sess->core;
 	u32 reg;
 	u32 buffer_index;
-	struct amvdec_core *core = sess->core;
+	u32 field = V4L2_FIELD_NONE;
 
 	reg = amvdec_read_dos(core, MREG_FATAL_ERROR);
-	if (reg == 1)
+	if (reg == 1) {
 		dev_err(core->dev, "mpeg4 fatal error\n");
+		amvdec_abort(sess);
+		return IRQ_HANDLED;
+	}
 
 	reg = amvdec_read_dos(core, MREG_BUFFEROUT);
-	if (reg) {
-		sess->keyframe_found = 1;
-		amvdec_read_dos(core, MP4_NOT_CODED_CNT);
-		amvdec_read_dos(core, MP4_VOP_TIME_INC);
-		buffer_index = reg & 0x7;
-		amvdec_dst_buf_done_idx(sess, buffer_index, V4L2_FIELD_NONE);
-		amvdec_write_dos(core, MREG_BUFFEROUT, 0);
-	}
+	if (!reg)
+		goto end;
 
-	amvdec_write_dos(core, ASSIST_MBOX1_CLR_REG, 1);
+	sess->keyframe_found = 1;
+	buffer_index = reg & BUF_IDX_MASK;
+	if (reg & INTERLACE_FLAG)
+		field = (reg & TOP_FIELD_FIRST_FLAG) ?
+			V4L2_FIELD_INTERLACED_TB :
+			V4L2_FIELD_INTERLACED_BT;
 
+	amvdec_dst_buf_done_idx(sess, buffer_index, field);
+	amvdec_write_dos(core, MREG_BUFFEROUT, 0);
+
+end:
+	amvdec_write_dos(core, ASSIST_MBOX1_CLR_REG, 1);
 	return IRQ_HANDLED;
 }
 
